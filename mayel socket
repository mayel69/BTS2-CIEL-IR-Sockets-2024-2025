bool NetworkDiscovery::Init()
{
	// À compléter :
	// 1. Essayer de lier le socket au port NetworkPort
	// 2. Si échec, essayer les ports suivants jusqu'à succès
	// 3. Ajouter le socket au sélecteur
	uint16_t port = NetworkPort;
	sf::Socket::Status status;

	status = _socket.bind(port);

	while (status != sf::Socket::Status::Done || port = )
	{
		port++;
		status = _socket.bind(port);
	}

	if (port == NetworkPort + 1000)
	{
		std::cerr << "port error" << port << std::endl;
	}
	_socketSelector.add(_socket);
	return true;
}



void NetworkDiscovery::Update()
{
	uint64_t nowMs = GetTimeMs();

	if(_isBroadcastEnabled)
	{

		if (nowMs _lastDeclareTime >= DeclareGameServerDelayMs)
		{
			sf::Packet packet;
				packet << MagicPacket;
			packet << _localServerName;
			_socket.send(packet, sf::IpAddress::Broadcast, Init);
		}
	}
